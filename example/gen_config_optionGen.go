// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import (
	"log"
	"sync/atomic"
	"unsafe"
)

// Google Public DNS provides two distinct DoH APIs at these endpoints
// Using the GET method can reduce latency, as it is cached more effectively.
// RFC 8484 GET requests must have a ?dns= query parameter with a Base64Url encoded DNS message. The GET method is the only method supported for the JSON API.

type Config struct {
	// test comment 1
	// test comment 2
	TestNil             interface{}       `xconf:"re3"` // test comment 3
	TestInt             int               `xconf:"test_int" usage:"这里是函数注释1,\"test\"  这里是函数注释2"`
	TestInt64           int64             `xconf:"test_int64"`
	TestSliceInt        []int             `xconf:"test_slice_int"`
	TestSliceInt64      []int64           `xconf:"test_slice_int64"`
	TestSliceString     []string          `xconf:"test_slice_string"`
	TestSliceBool       []bool            `xconf:"test_slice_bool"`
	TestSliceIntNil     []int             `xconf:"test_slice_int_nil"`
	TestSliceByte       []byte            `xconf:"test_slice_byte"`
	TestSliceIntEmpty   []int             `xconf:"test_slice_int_empty"`
	TestHTTPPort        string            `xconf:"test_http_port"`
	TestEmptyMap        map[int]int       `xconf:"test_empty_map"`
	TestMapIntInt       map[int]int       `xconf:"test_map_int_int"`
	TestMapIntString    map[int]string    `xconf:"test_map_int_string"`
	TestMapStringInt    map[string]int    `xconf:"test_map_string_int"`
	TestMapStringString map[string]string `xconf:"test_map_string_string"`
	TestString          string            `xconf:"test_string"`
	Food                *string           `xconf:"food"`
	Walk                func()            `xconf:"walk"`
	TestNilFunc         func()            `xconf:"test_nil_func"` // 中文1
	FOO                 *FOO              `xconf:"foo"`
	TestProtected       []byte            `xconf:"test_protected"`
	SubTest             *SubTest          `xconf:"sub_test"`
	TestParamterInt     bool              `xconf:"test_paramter_int"` // reserved parameter 1
	TestParamterStr     string            `xconf:"test_paramter_str"` // reserved parameter 2
}

func (cc *Config) SetOption(opt ConfigOption) {
	_ = opt(cc)
}

func (cc *Config) ApplyOption(opts ...ConfigOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Config) GetSetOption(opt ConfigOption) ConfigOption {
	return opt(cc)
}

type ConfigOption func(cc *Config) ConfigOption

func WithTestNil(v interface{}) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestNil
		cc.TestNil = v
		return WithTestNil(previous)
	}
}

// 这里是函数注释1,&#34;test&#34;
// 这里是函数注释2
func WithTestInt(v int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestInt
		cc.TestInt = v
		return WithTestInt(previous)
	}
}

func WithTestInt64(v int64) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestInt64
		cc.TestInt64 = v
		return WithTestInt64(previous)
	}
}

func WithTestSliceInt(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt
		cc.TestSliceInt = v
		return WithTestSliceInt(previous...)
	}
}

func WithTestSliceInt64(v ...int64) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt64
		cc.TestSliceInt64 = v
		return WithTestSliceInt64(previous...)
	}
}

func WithTestSliceString(v ...string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceString
		cc.TestSliceString = v
		return WithTestSliceString(previous...)
	}
}

func WithTestSliceBool(v ...bool) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceBool
		cc.TestSliceBool = v
		return WithTestSliceBool(previous...)
	}
}

func WithTestSliceIntNil(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntNil
		cc.TestSliceIntNil = v
		return WithTestSliceIntNil(previous...)
	}
}

func WithTestSliceByte(v []byte) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceByte
		cc.TestSliceByte = v
		return WithTestSliceByte(previous)
	}
}

func WithTestSliceIntEmpty(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntEmpty
		cc.TestSliceIntEmpty = v
		return WithTestSliceIntEmpty(previous...)
	}
}

func WithTestHTTPPort(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestHTTPPort
		cc.TestHTTPPort = v
		return WithTestHTTPPort(previous)
	}
}

func WithTestEmptyMap(v map[int]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestEmptyMap
		cc.TestEmptyMap = v
		return WithTestEmptyMap(previous)
	}
}

func WithTestMapIntInt(v map[int]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapIntInt
		cc.TestMapIntInt = v
		return WithTestMapIntInt(previous)
	}
}

func WithTestMapIntString(v map[int]string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapIntString
		cc.TestMapIntString = v
		return WithTestMapIntString(previous)
	}
}

func WithTestMapStringInt(v map[string]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapStringInt
		cc.TestMapStringInt = v
		return WithTestMapStringInt(previous)
	}
}

func WithTestMapStringString(v map[string]string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapStringString
		cc.TestMapStringString = v
		return WithTestMapStringString(previous)
	}
}

func WithTestString(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestString
		cc.TestString = v
		return WithTestString(previous)
	}
}

func WithFood(v *string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.Food
		cc.Food = v
		return WithFood(previous)
	}
}

func WithWalk(v func()) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.Walk
		cc.Walk = v
		return WithWalk(previous)
	}
}

func WithTestNilFunc(v func()) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestNilFunc
		cc.TestNilFunc = v
		return WithTestNilFunc(previous)
	}
}

func WithFOO(v *FOO) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.FOO
		cc.FOO = v
		return WithFOO(previous)
	}
}

func WithSubTest(v *SubTest) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.SubTest
		cc.SubTest = v
		return WithSubTest(previous)
	}
}

func NewFuncNameSpecified(testParamterInt bool, testParamterStr string, opts ...ConfigOption) *Config {
	cc := newDefaultConfig()
	cc.TestParamterInt = testParamterInt
	cc.TestParamterStr = testParamterStr

	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogConfig != nil {
		watchDogConfig(cc)
	}
	return cc
}

func InstallConfigWatchDog(dog func(cc *Config)) {
	watchDogConfig = dog
}

var watchDogConfig func(cc *Config)

func newDefaultConfig() *Config {

	cc := &Config{
		TestProtected:   nil,
		TestParamterInt: false,
		TestParamterStr: "",
	}

	for _, opt := range [...]ConfigOption{
		WithTestNil(nil),
		WithTestInt(32),
		WithTestInt64(32),
		WithTestSliceInt([]int{1, 2, 3}...),
		WithTestSliceInt64([]int64{1, 2, 3}...),
		WithTestSliceString([]string{"test1", "test2"}...),
		WithTestSliceBool([]bool{false, true}...),
		WithTestSliceIntNil(nil...),
		WithTestSliceByte(nil),
		WithTestSliceIntEmpty(make([]int, 0)...),
		WithTestHTTPPort(""),
		WithTestEmptyMap(make(map[int]int, 0)),
		WithTestMapIntInt(map[int]int{1: 1, 2: 2, 3: 3}),
		WithTestMapIntString(map[int]string{1: "test"}),
		WithTestMapStringInt(map[string]int{"test": 1}),
		WithTestMapStringString(map[string]string{"test": "test"}),
		WithTestString("Meow"),
		WithFood(nil),
		WithWalk(func() {
			log.Println("Walking")
		}),
		WithTestNilFunc(nil),
		WithFOO(nil),
		WithSubTest(&SubTest{}),
	} {
		_ = opt(cc)
	}

	return cc
}

func (cc *Config) AtomicSetFunc() func(interface{}) { return AtomicConfigSet }

var atomicConfig unsafe.Pointer

func AtomicConfigSet(update interface{}) {
	atomic.StorePointer(&atomicConfig, (unsafe.Pointer)(update.(*Config)))
}

func AtomicConfig() ConfigInterface {
	current := (*Config)(atomic.LoadPointer(&atomicConfig))
	if current == nil {
		atomic.CompareAndSwapPointer(&atomicConfig, nil, (unsafe.Pointer)(newDefaultConfig()))
		return (*Config)(atomic.LoadPointer(&atomicConfig))
	}
	return current
}

// all getter func
func (cc *Config) GetTestNil() interface{}                   { return cc.TestNil }
func (cc *Config) GetTestInt() int                           { return cc.TestInt }
func (cc *Config) GetTestInt64() int64                       { return cc.TestInt64 }
func (cc *Config) GetTestSliceInt() []int                    { return cc.TestSliceInt }
func (cc *Config) GetTestSliceInt64() []int64                { return cc.TestSliceInt64 }
func (cc *Config) GetTestSliceString() []string              { return cc.TestSliceString }
func (cc *Config) GetTestSliceBool() []bool                  { return cc.TestSliceBool }
func (cc *Config) GetTestSliceIntNil() []int                 { return cc.TestSliceIntNil }
func (cc *Config) GetTestSliceByte() []byte                  { return cc.TestSliceByte }
func (cc *Config) GetTestSliceIntEmpty() []int               { return cc.TestSliceIntEmpty }
func (cc *Config) GetTestHTTPPort() string                   { return cc.TestHTTPPort }
func (cc *Config) GetTestEmptyMap() map[int]int              { return cc.TestEmptyMap }
func (cc *Config) GetTestMapIntInt() map[int]int             { return cc.TestMapIntInt }
func (cc *Config) GetTestMapIntString() map[int]string       { return cc.TestMapIntString }
func (cc *Config) GetTestMapStringInt() map[string]int       { return cc.TestMapStringInt }
func (cc *Config) GetTestMapStringString() map[string]string { return cc.TestMapStringString }
func (cc *Config) GetTestString() string                     { return cc.TestString }
func (cc *Config) GetFood() *string                          { return cc.Food }
func (cc *Config) GetWalk() func()                           { return cc.Walk }
func (cc *Config) GetTestNilFunc() func()                    { return cc.TestNilFunc }
func (cc *Config) GetFOO() *FOO                              { return cc.FOO }
func (cc *Config) GetTestProtected() []byte                  { return cc.TestProtected }
func (cc *Config) GetSubTest() *SubTest                      { return cc.SubTest }
func (cc *Config) GetTestParamterInt() bool                  { return cc.TestParamterInt }
func (cc *Config) GetTestParamterStr() string                { return cc.TestParamterStr }

// interface for Config
type ConfigInterface interface {
	GetTestNil() interface{}
	GetTestInt() int
	GetTestInt64() int64
	GetTestSliceInt() []int
	GetTestSliceInt64() []int64
	GetTestSliceString() []string
	GetTestSliceBool() []bool
	GetTestSliceIntNil() []int
	GetTestSliceByte() []byte
	GetTestSliceIntEmpty() []int
	GetTestHTTPPort() string
	GetTestEmptyMap() map[int]int
	GetTestMapIntInt() map[int]int
	GetTestMapIntString() map[int]string
	GetTestMapStringInt() map[string]int
	GetTestMapStringString() map[string]string
	GetTestString() string
	GetFood() *string
	GetWalk() func()
	GetTestNilFunc() func()
	GetFOO() *FOO
	GetTestProtected() []byte
	GetSubTest() *SubTest
	GetTestParamterInt() bool
	GetTestParamterStr() string
}
