// Code generated by optionGen. DO NOT EDIT.
// optionGen: github.com/timestee/optionGen

package example

import "log"

type Config struct {
	TestNil             interface{}
	TestBool            bool
	TestInt             int
	TestInt64           int64
	TestSliceInt        []int
	TestSliceInt64      []int64
	TestSliceString     []string
	TestSliceBool       []bool
	TestSliceIntNil     []int
	TestSliceIntEmpty   []int
	TestMapIntInt       map[int]int
	TestMapIntString    map[int]string
	TestMapStringInt    map[string]int
	TestMapStringString map[string]string
	TestString          string
	Food                *string
	Walk                func()
	TestNilFunc         func()
	TestReserved1_      []byte
	TestReserved2Inner  int
}

type ConfigOption func(oo *Config)

func WithTestNil(v interface{}) ConfigOption       { return func(oo *Config) { oo.TestNil = v } }
func WithTestBool(v bool) ConfigOption             { return func(oo *Config) { oo.TestBool = v } }
func WithTestInt(v int) ConfigOption               { return func(oo *Config) { oo.TestInt = v } }
func WithTestInt64(v int64) ConfigOption           { return func(oo *Config) { oo.TestInt64 = v } }
func WithTestSliceInt(v []int) ConfigOption        { return func(oo *Config) { oo.TestSliceInt = v } }
func WithTestSliceInt64(v []int64) ConfigOption    { return func(oo *Config) { oo.TestSliceInt64 = v } }
func WithTestSliceString(v []string) ConfigOption  { return func(oo *Config) { oo.TestSliceString = v } }
func WithTestSliceBool(v []bool) ConfigOption      { return func(oo *Config) { oo.TestSliceBool = v } }
func WithTestSliceIntNil(v []int) ConfigOption     { return func(oo *Config) { oo.TestSliceIntNil = v } }
func WithTestSliceIntEmpty(v []int) ConfigOption   { return func(oo *Config) { oo.TestSliceIntEmpty = v } }
func WithTestMapIntInt(v map[int]int) ConfigOption { return func(oo *Config) { oo.TestMapIntInt = v } }
func WithTestMapIntString(v map[int]string) ConfigOption {
	return func(oo *Config) { oo.TestMapIntString = v }
}
func WithTestMapStringInt(v map[string]int) ConfigOption {
	return func(oo *Config) { oo.TestMapStringInt = v }
}
func WithTestMapStringString(v map[string]string) ConfigOption {
	return func(oo *Config) { oo.TestMapStringString = v }
}
func WithTestString(v string) ConfigOption  { return func(oo *Config) { oo.TestString = v } }
func WithFood(v *string) ConfigOption       { return func(oo *Config) { oo.Food = v } }
func WithWalk(v func()) ConfigOption        { return func(oo *Config) { oo.Walk = v } }
func WithTestNilFunc(v func()) ConfigOption { return func(oo *Config) { oo.TestNilFunc = v } }

func NewConfig(opts ...ConfigOption) *Config {
	ret := newDefaultConfig()
	for _, o := range opts {
		o(ret)
	}
	if watchDogConfig != nil {
		watchDogConfig(ret)
	}
	return ret
}

func InstallConfigWatchDog(dog ConfigOption) {
	watchDogConfig = dog
}

var watchDogConfig ConfigOption

var defaultConfigOptions = [...]ConfigOption{
	WithTestNil(nil),
	WithTestBool(false),
	WithTestInt(32),
	WithTestInt64(32),
	WithTestSliceInt([]int{1, 2, 3}),
	WithTestSliceInt64([]int64{1, 2, 3}),
	WithTestSliceString([]string{"test1", "test2"}),
	WithTestSliceBool([]bool{false, true}),
	WithTestSliceIntNil(nil),
	WithTestSliceIntEmpty(nil),
	WithTestMapIntInt(map[int]int{1: 1, 2: 2, 3: 3}),
	WithTestMapIntString(map[int]string{1: "test"}),
	WithTestMapStringInt(map[string]int{"test": 1}),
	WithTestMapStringString(map[string]string{"test": "test"}),
	WithTestString("Meow"),
	WithFood(nil),
	WithWalk(func() {
		log.Println("Walking")
	}),
	WithTestNilFunc(nil),
}

func newDefaultConfig() *Config {
	ret := &Config{
		TestReserved1_:     nil,
		TestReserved2Inner: 1,
	}

	for _, o := range defaultConfigOptions {
		o(ret)
	}

	return ret
}
