// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import "time"

// XXXXXX should use NewXXXXXX to initialize it
type XXXXXX struct {
	Endpoints        []string
	ReadTimeout      time.Duration
	TypeMapIntString map[int]string
	TypeSliceInt64   []int64
	TypeBool         bool
	MapRedis         map[string]*Redis
	// annotation@Redis(getter="RedisVisitor")
	Redis              *Redis     // 辅助指定类型为*Redis
	OnWatchError       WatchError // 辅助指定类型为WatchError
	OnWatchErrorNotNil func(loaderName string, confPath string, watchErr error)
	TypeSliceDuratuon  []time.Duration // 辅助指定类型为WatchError
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *XXXXXX) ApplyOption(opts ...XXXXXXOption) []XXXXXXOption {
	var previous []XXXXXXOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// XXXXXXOption option func
type XXXXXXOption func(cc *XXXXXX) XXXXXXOption

// WithXXXXXXEndpoints option func for Endpoints
func WithXXXXXXEndpoints(v ...string) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.Endpoints
		cc.Endpoints = v
		return WithXXXXXXEndpoints(previous...)
	}
}

// WithXXXXXXReadTimeout option func for ReadTimeout
func WithXXXXXXReadTimeout(v time.Duration) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.ReadTimeout
		cc.ReadTimeout = v
		return WithXXXXXXReadTimeout(previous)
	}
}

// WithXXXXXXTypeMapIntString option func for TypeMapIntString
func WithXXXXXXTypeMapIntString(v map[int]string) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.TypeMapIntString
		cc.TypeMapIntString = v
		return WithXXXXXXTypeMapIntString(previous)
	}
}

// WithXXXXXXTypeSliceInt64 option func for TypeSliceInt64
func WithXXXXXXTypeSliceInt64(v ...int64) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.TypeSliceInt64
		cc.TypeSliceInt64 = v
		return WithXXXXXXTypeSliceInt64(previous...)
	}
}

// WithXXXXXXTypeBool option func for TypeBool
func WithXXXXXXTypeBool(v bool) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.TypeBool
		cc.TypeBool = v
		return WithXXXXXXTypeBool(previous)
	}
}

// WithXXXXXXMapRedis option func for MapRedis
func WithXXXXXXMapRedis(v map[string]*Redis) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.MapRedis
		cc.MapRedis = v
		return WithXXXXXXMapRedis(previous)
	}
}

// WithXXXXXXRedis option func for Redis
func WithXXXXXXRedis(v *Redis) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.Redis
		cc.Redis = v
		return WithXXXXXXRedis(previous)
	}
}

// WithXXXXXXOnWatchError option func for OnWatchError
func WithXXXXXXOnWatchError(v WatchError) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.OnWatchError
		cc.OnWatchError = v
		return WithXXXXXXOnWatchError(previous)
	}
}

// WithXXXXXXOnWatchErrorNotNil option func for OnWatchErrorNotNil
func WithXXXXXXOnWatchErrorNotNil(v func(loaderName string, confPath string, watchErr error)) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.OnWatchErrorNotNil
		cc.OnWatchErrorNotNil = v
		return WithXXXXXXOnWatchErrorNotNil(previous)
	}
}

// WithXXXXXXTypeSliceDuratuon option func for TypeSliceDuratuon
func WithXXXXXXTypeSliceDuratuon(v ...time.Duration) XXXXXXOption {
	return func(cc *XXXXXX) XXXXXXOption {
		previous := cc.TypeSliceDuratuon
		cc.TypeSliceDuratuon = v
		return WithXXXXXXTypeSliceDuratuon(previous...)
	}
}

// NewXXXXXX new XXXXXX
func NewXXXXXX(opts ...XXXXXXOption) *XXXXXX {
	cc := newDefaultXXXXXX()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogXXXXXX != nil {
		watchDogXXXXXX(cc)
	}
	return cc
}

// InstallXXXXXXWatchDog the installed func will called when NewXXXXXX  called
func InstallXXXXXXWatchDog(dog func(cc *XXXXXX)) { watchDogXXXXXX = dog }

// watchDogXXXXXX global watch dog
var watchDogXXXXXX func(cc *XXXXXX)

// newDefaultXXXXXX new default XXXXXX
func newDefaultXXXXXX() *XXXXXX {
	cc := &XXXXXX{}

	for _, opt := range [...]XXXXXXOption{
		WithXXXXXXEndpoints([]string{"10.0.0.1", "10.0.0.2"}...),
		WithXXXXXXReadTimeout(time.Second),
		WithXXXXXXTypeMapIntString(map[int]string{1: "a", 2: "b"}),
		WithXXXXXXTypeSliceInt64([]int64{1, 2, 3, 4}...),
		WithXXXXXXTypeBool(false),
		WithXXXXXXMapRedis(map[string]*Redis{"test": NewRedis()}),
		WithXXXXXXRedis(NewRedis()),
		WithXXXXXXOnWatchError(nil),
		WithXXXXXXOnWatchErrorNotNil(func(loaderName string, confPath string, watchErr error) {
		}),
		WithXXXXXXTypeSliceDuratuon([]time.Duration{time.Second, time.Minute, time.Hour}...),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *XXXXXX) GetEndpoints() []string              { return cc.Endpoints }
func (cc *XXXXXX) GetReadTimeout() time.Duration       { return cc.ReadTimeout }
func (cc *XXXXXX) GetTypeMapIntString() map[int]string { return cc.TypeMapIntString }
func (cc *XXXXXX) GetTypeSliceInt64() []int64          { return cc.TypeSliceInt64 }
func (cc *XXXXXX) GetTypeBool() bool                   { return cc.TypeBool }
func (cc *XXXXXX) GetMapRedis() map[string]*Redis      { return cc.MapRedis }
func (cc *XXXXXX) GetRedis() RedisVisitor              { return cc.Redis }
func (cc *XXXXXX) GetOnWatchError() WatchError         { return cc.OnWatchError }
func (cc *XXXXXX) GetOnWatchErrorNotNil() func(loaderName string, confPath string, watchErr error) {
	return cc.OnWatchErrorNotNil
}
func (cc *XXXXXX) GetTypeSliceDuratuon() []time.Duration { return cc.TypeSliceDuratuon }

// XXXXXXVisitor visitor interface for XXXXXX
type XXXXXXVisitor interface {
	GetEndpoints() []string
	GetReadTimeout() time.Duration
	GetTypeMapIntString() map[int]string
	GetTypeSliceInt64() []int64
	GetTypeBool() bool
	GetMapRedis() map[string]*Redis
	GetRedis() RedisVisitor
	GetOnWatchError() WatchError
	GetOnWatchErrorNotNil() func(loaderName string, confPath string, watchErr error)
	GetTypeSliceDuratuon() []time.Duration
}

// XXXXXXInterface visitor + ApplyOption interface for XXXXXX
type XXXXXXInterface interface {
	XXXXXXVisitor
	ApplyOption(...XXXXXXOption) []XXXXXXOption
}
