// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import (
	"sync/atomic"
	"unsafe"
)

// Redis should use NewRedis to initialize it
type Redis struct {
}

// ApplyOption apply mutiple new option
func (cc *Redis) ApplyOption(opts ...RedisOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// RedisOption option func
type RedisOption func(cc *Redis)

// NewRedis new Redis
func NewRedis(opts ...RedisOption) RedisVisitor {
	cc := newDefaultRedis()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogRedis != nil {
		watchDogRedis(cc)
	}
	return cc
}

// InstallRedisWatchDog the installed func will called when NewRedis  called
func InstallRedisWatchDog(dog func(cc *Redis)) { watchDogRedis = dog }

// watchDogRedis global watch dog
var watchDogRedis func(cc *Redis)

// newDefaultRedis new default Redis
func newDefaultRedis() *Redis {
	cc := &Redis{}

	for _, opt := range [...]RedisOption{} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Redis) AtomicSetFunc() func(interface{}) { return AtomicRedisSet }

// atomicRedis global *Redis holder
var atomicRedis unsafe.Pointer

// onAtomicRedisSet global call back when  AtomicRedisSet called by XConf.
// use RedisInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicRedis
var onAtomicRedisSet func(cc RedisInterface) bool

// InstallCallbackOnAtomicRedisSet install callback
func InstallCallbackOnAtomicRedisSet(callback func(cc RedisInterface) bool) {
	onAtomicRedisSet = callback
}

// AtomicRedisSet atomic setter for *Redis
func AtomicRedisSet(update interface{}) {
	cc := update.(*Redis)
	if onAtomicRedisSet != nil && !onAtomicRedisSet(cc) {
		return
	}
	atomic.StorePointer(&atomicRedis, (unsafe.Pointer)(cc))
}

// AtomicRedis return atomic *RedisVisitor
func AtomicRedis() RedisVisitor {
	current := (*Redis)(atomic.LoadPointer(&atomicRedis))
	if current == nil {
		defaultOne := newDefaultRedis()
		if watchDogRedis != nil {
			watchDogRedis(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicRedis, nil, (unsafe.Pointer)(defaultOne))
		return (*Redis)(atomic.LoadPointer(&atomicRedis))
	}
	return current
}

// all getter func

// RedisVisitor visitor interface for Redis
type RedisVisitor interface {
}

// RedisInterface visitor + ApplyOption interface for Redis
type RedisInterface interface {
	RedisVisitor
	ApplyOption(...RedisOption)
}
